#include<stdio.h>
#include<stdlib.h>
//建node 
struct node
{
	int data;
	struct node* next;
};
typedef struct node NODE;//struct node定義成NODE型態
//function:
//建立
NODE* createList(int*, int);
//列印
void printList(NODE*);
//merge
NODE* merge(NODE* l1, NODE* l2);
int main() {
	NODE* List1,*List2, * node;
	int arr1[] = { 1,3,5,7 };
	List1 = createList(arr1, sizeof(arr1)/sizeof(arr1[0])); //建立串列 
	int arr2[] = { 2,4,6,8 };
	List2 = createList(arr2, sizeof(arr2)/sizeof(arr2[0])); //建立串列 
	printList(List1);
	printList(List2);

	printList(merge(List1,List2));

	

	return 0;
}
//建立 
NODE* createList(int* arr, int len) {
	int i;
	NODE* first = NULL;
	NODE* previous = NULL;
	NODE* current;
	for (i = 0; i < len; i++) {
		current = (NODE*)malloc(sizeof(NODE));//配置記憶體空間
		current->data = arr[i];//設定NODE的data
		if (i == 0)
			first = current;
		else
			previous->next = current;
		current->next = NULL;
		previous = current;

	}
	return first;
}
//列印 
void printList(NODE* first) {
	NODE* node = first;//指向第一個NODE
	if (first == NULL)//如果是空的,印出 沒東西 
		printf("List is empty\n");
	else//否則 走訪 
	{
		while (node != NULL)
		{
			printf("%3d", node->data);
			node = node->next;
		}
		printf("\n");
	}
}
NODE* merge(NODE* l1, NODE* l2) {
	//if NULL
	if (l1 == NULL) return l2;
	if (l2 == NULL) return l1;
	NODE* mergehead = NULL;
	if (l1->data < l2->data) {
		mergehead = l1;
		l1 = l1->next;
	}
	else {
		mergehead = l2;
		l2 = l2->next;
	}
	NODE* ptr = mergehead;
	while (l1 != NULL && l2 != NULL) {
		if (l1->data < l2->data) {
			ptr->next = l1;
			l1 = l1->next;
		}
		else {
			ptr->next = l2;
			l2 = l2->next;
		}
		ptr = ptr->next;
	}
	if (l1 != NULL) ptr->next = l1;
	if (l2 != NULL) ptr->next = l2;

	return mergehead;
}
